# -*- coding: utf-8 -*-
"""procesoETL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GmJANQRhdlEZT96uQHeG0sM8XVxk8dsP

# **Librerías**
"""

import sqlalchemy
from sqlalchemy import create_engine
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
from sqlalchemy import inspect

"""# **Crear la base de datos**"""

import sqlite3
conexion=sqlite3.connect("Chinook_multdim.db")

"""# **Creación de las dimensiones y la tabla hechos**

**dim_albums**
"""

try:
    conexion.execute("""CREATE TABLE dim_albums (
            AlbumId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            Title NVARCHAR (160) NOT NULL
           )""")
    print("se creo la tabla dim_albums")                        
except sqlite3.OperationalError:
    print("La tabla dim_albums ya existe")

"""**dim_artists**"""

try:
    conexion.execute("""CREATE TABLE dim_artists (
            ArtistId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
            Name NVARCHAR (120) NOT NULL
           )""")
    print("se creo la tabla dim_artists")                        
except sqlite3.OperationalError:
    print("La tabla dim_artists ya existe")

"""**dim_customers**"""

try:
    conexion.execute("""CREATE TABLE dim_customers (
    CustomerId   INTEGER       PRIMARY KEY AUTOINCREMENT
                               NOT NULL,
    FirstName    NVARCHAR (40) NOT NULL,
    LastName     NVARCHAR (20) NOT NULL,
    Company      NVARCHAR (80),
    Address      NVARCHAR (70),
    City         NVARCHAR (40),
    State        NVARCHAR (40),
    Country      NVARCHAR (40),
    PostalCode   NVARCHAR (10),
    Phone        NVARCHAR (24),
    Fax          NVARCHAR (24),
    Email        NVARCHAR (60) NOT NULL,
)""")
    print("se creo la tabla dim_customers")                        
except sqlite3.OperationalError:
    print("La tabla dim_customers ya existe")

"""**dim_employees**"""

try:
    conexion.execute("""CREATE TABLE dim_employees (
    EmployeeId INTEGER       PRIMARY KEY AUTOINCREMENT
                             NOT NULL,
    LastName   NVARCHAR (20) NOT NULL,
    FirstName  NVARCHAR (20) NOT NULL,
    Title      NVARCHAR (30),
    BirthDate  DATETIME,
    HireDate   DATETIME,
    Address    NVARCHAR (70),
    City       NVARCHAR (40),
    State      NVARCHAR (40),
    Country    NVARCHAR (40),
    PostalCode NVARCHAR (10),
    Phone      NVARCHAR (24),
    Fax        NVARCHAR (24),
    Email      NVARCHAR (60) 
)""")
    print("se creo la tabla dim_employees")                        
except sqlite3.OperationalError:
    print("La tabla dim_employees ya existe")

"""**dim_genres**"""

try:
    conexion.execute("""CREATE TABLE dim_genres (
    GenreId INTEGER        PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name    NVARCHAR (120) 
)""")
    print("se creo la tabla dim_genres")                        
except sqlite3.OperationalError:
    print("La tabla dim_genres ya existe")

"""**dim_invoice**"""

try:
    conexion.execute("""CREATE TABLE dim_invoice (
    InvoiceId INTEGER         PRIMARY KEY AUTOINCREMENT NOT NULL,
    Total     NUMERIC (10, 2) NOT NULL
)""")
    print("se creo la tabla dim_invoice")                        
except sqlite3.OperationalError:
    print("La tabla dim_invoice ya existe")

"""**dim_location**"""

try:
    conexion.execute("""CREATE TABLE dim_location (
    LocationId        INTEGER      PRIMARY KEY AUTOINCREMENT NOT NULL,
    BillingAddress    VARCHAR (70),
    BillingCity       VARCHAR (40),
    BillingState      VARCHAR (40),
    BillingCountry    VARCHAR (40),
    BillingPostalCode VARCHAR (10) 
)""")
    print("se creo la tabla dim_location")                        
except sqlite3.OperationalError:
    print("La tabla dim_location ya existe")

"""**dim_media_types**"""

try:
    conexion.execute("""CREATE TABLE dim_media_types (
    MediaTypeId INTEGER        PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name        NVARCHAR (120) 
)""")
    print("se creo la tabla dim_media_types")                        
except sqlite3.OperationalError:
    print("La tabla dim_media_types ya existe")

"""**dim_playlists**"""

try:
    conexion.execute("""CREATE TABLE dim_playlists (
    PlaylistId INTEGER        PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name       NVARCHAR (120) 
)""")
    print("se creo la tabla dim_playlists")                        
except sqlite3.OperationalError:
    print("La tabla dim_playlists ya existe")

"""**dim_time**"""

try:
    conexion.execute("""CREATE TABLE dim_time (
        TimeId INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
        Day INTEGER NOT NULL,
        Month INTEGER NOT NULL,
        Year INTEGER NOT NULL,
        Quarter INTEGER NOT NULL,
        Week INTEGER NOT NULL,
        WeekDay INTEGER NOT NULL,
        NameDay NVARCHAR (10) NOT NULL,
        NameMonth NVARCHAR (15) NOT NULL
)""")
    print("se creo la tabla dim_time")                        
except sqlite3.OperationalError:
    print("La tabla dim_time ya existe")

"""**dim_tracks**"""

try:
    conexion.execute("""CREATE TABLE dim_tracks (
    TrackId      INTEGER         PRIMARY KEY AUTOINCREMENT NOT NULL,
    Name         NVARCHAR (200)  NOT NULL,
    Composer     NVARCHAR (220),
    Milliseconds INTEGER         NOT NULL,
    Bytes        INTEGER,
    UnitPrice    NUMERIC (10, 2) NOT NULL
)""")
    print("se creo la tabla dim_tracks")                        
except sqlite3.OperationalError:
    print("La tabla dim_tracks ya existe")

"""**Fact_invoice_item** (**hechos**)"""

try:
    conexion.execute("""CREATE TABLE Fact_invoice_item (
    Id          INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    InvoiceId   INTEGER REFERENCES dim_invoice (InvoiceID) NOT NULL,
    CustomerId  INTEGER NOT NULL REFERENCES dim_customers (CustomerId),
    TimeId      INT     REFERENCES dim_time (TimeID) NOT NULL,
    LocationId  INTEGER REFERENCES dim_location (LocationID) NOT NULL,
    TrackId     INTEGER REFERENCES dim_tracks (TrackId) NOT NULL,
    PlaylistId  INTEGER REFERENCES dim_playlists (PlaylistId) NOT NULL,
    ArtistId    INTEGER REFERENCES dim_artists (ArtistId) NOT NULL,
    AlbumId     INTEGER REFERENCES dim_albums (AlbumId) NOT NULL,
    EmployeeId  INTEGER REFERENCES dim_employees (EmployeeId),
    MediaTypeId INTEGER REFERENCES dim_media_types (MediaTypeId),
    GenreId     INTEGER REFERENCES dim_genres (GenreId),
    Quantity    INTEGER NOT NULL
);""")
    print("se creo la tabla Fact_invoice_item")                        
except sqlite3.OperationalError:
    print("La tabla Fact_invoice_item ya existe")

"""# **Conexión hacia las bases de datos**"""

#Conectar el motor al archivo de la base de datos a usar 
engine = create_engine('sqlite:///chinook.db')
engine

#Conectar el motor al archivo de la base de datos a usar 
engine2 = create_engine('sqlite:///Chinook_multdim.db')
engine2

"""# Extract"""

# SQL Expression Language crea metadatos que contienen objetos que definen a una tabla
metadata = MetaData()

#Este mètodo instancia las tablas que ya 
#existen en la base de datos, a la que està conectado
metadata.create_all(engine)
metadata.create_all(engine2)
# Revisando esto, podemos ver la estructura de la tabla y los tipos de variables 
inspector = inspect(engine)
inspector2 = inspect(engine2)

#datos de db
inspector.get_columns('employees')
inspector.get_columns('albums')
inspector.get_columns('media_types')
inspector.get_columns('genres')
inspector.get_columns('playlists')
inspector.get_columns('artists')
inspector.get_columns('invoices')
inspector.get_columns('customers')
inspector.get_columns('tracks')

"""# Transform"""

import pandas as pd

#dim_location
df_location=pd.read_sql_query("""SELECT BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode
FROM invoices;
 """, con=engine.connect())
df_location.head()

# dim_employees
df_employees=pd.read_sql_query("""SELECT EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, 
City, State, Country, PostalCode, Phone, Fax, Email
FROM employees;
 """, con=engine.connect())
df_employees.head()

# dim_employees
df_employees=pd.read_sql_query("""SELECT EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, 
City, State, Country, PostalCode, Phone, Fax, Email
FROM employees;
 """, con=engine.connect())
df_employees.head()

#dim_albums
df_albums=pd.read_sql_query("""SELECT AlbumId, Title
FROM albums;
 """, con=engine.connect())
df_albums.head()

#dim_media_types
df_mediatypes=pd.read_sql_query("""SELECT MediaTypeId, Name
FROM media_types;
 """, con=engine.connect())
df_mediatypes.head()

#dim_genre
df_genres=pd.read_sql_query("""SELECT GenreId, Name
FROM genres;
 """, con=engine.connect())
df_genres.head()

#dim_playlists
df_playlists=pd.read_sql_query("""SELECT PlaylistId, Name
FROM playlists;
 """, con=engine.connect())
df_playlists.head()

#dim_artists
df_artists=pd.read_sql_query("""SELECT ArtistId, Name
FROM artists;
 """, con=engine.connect())
df_artists.head()

#dim_invoice
df_invoices=pd.read_sql_query("""SELECT InvoiceId, Total
FROM invoices;
 """, con=engine.connect())
df_invoices.head()

#dim_customers
df_customers=pd.read_sql_query("""SELECT CustomerId,Firstname,LastName,Company,Address,City,State,Country,PostalCode,
Phone,Fax,Email,SupportRepId
FROM customers;
 """, con=engine.connect())
df_customers.head()

#dim_tracks
df_tracks=pd.read_sql_query("""SELECT TrackId,Name,MediaTypeID,GenreId,Composer,Milliseconds,Bytes,UnitPrice
FROM tracks;
 """, con=engine.connect())
df_tracks.head()

"""## dim_time"""

from datetime import date
from datetime import timedelta
import pandas as pd

date = pd.date_range('2010-01-01','2015-12-30',freq='D').to_series()
fecha = pd.to_datetime(date) 
day = fecha.dt.day
month = fecha.dt.month
year = fecha.dt.year
quarter = fecha.dt.quarter
week = fecha.dt.week
weekday = fecha.dt.weekday
day_name = fecha.dt.day_name()
month_name = fecha.dt.month_name()

df_time = pd.DataFrame({'Day':list(day),'Month':list(month),'Year':list(year),'Quarter':list(quarter),'Week':list(week),'Weekday':list(weekday),'NameDay':list(day_name),'NameMonth':list(month_name)})
df_time.head()

"""# Load

## Funciones de carga
"""

def updateData(name_table,data_db,name_columns):
	print(name_columns)
	aux_values='?'
	aux_data=[]
	aux_columns=name_columns[0]
	aux_data.append(list(data_db[name_columns[0]]))
	entities=[]
	aux_entities=[]
	for i in range(len(name_columns)-1):
		aux_values+=',?'
		aux_columns+=','+name_columns[i+1]
		aux_data.append(list(data_db[name_columns[i+1]]))
	for i in range(len(aux_data[0])):
		for j in range(len(aux_data)):
			aux_entities.append(aux_data[j][i])
		entities.append(aux_entities)
		aux_entities=[]
	with engine2.connect() as con:
		for i in entities:
			con.execute('INSERT INTO '+name_table+'('+aux_columns+') VALUES('+aux_values+')', i)
	con.close()

"""## dim_employees """

updateData('dim_employees',df_employees,list(df_employees.columns.values))

"""## dim_albums"""

updateData('dim_albums',df_albums,list(df_albums.columns.values))

"""## dim_media_types"""

updateData('dim_media_types',df_mediatypes,list(df_mediatypes.columns.values))

"""## dim_genres"""

updateData('dim_genres',df_genres,list(df_genres.columns.values))

"""## dim_playlists"""

updateData('dim_playlists',df_playlists,list(df_playlists.columns.values))

"""## dim_artists"""

updateData('dim_artists',df_artists,list(df_artists.columns.values))

"""## dim_invoice"""

updateData('dim_invoice',df_invoices,list(df_invoices.columns.values))

"""## dim_customers"""

updateData('dim_customers',df_customers,list(df_customers.columns.values))

"""## dim_tracks"""

updateData('dim_tracks',df_tracks,list(df_tracks.columns.values))

"""## dim_location"""

updateData('dim_location',df_location,list(df_location.columns.values))

"""dim_time"""

updateData('dim_time',df_time,list(df_time.columns.values))

"""# Fact_invoice_item"""

#fac_invoce_items
#ColumsAux
df_AuxInvoiceId=pd.read_sql_query("""SELECT InvoiceId
FROM invoice_items;
 """, con=engine.connect())
df_AuxInvoiceId.head()

df_CustInv=pd.read_sql_query("""SELECT InvoiceId, CustomerId
FROM invoices;
 """, con=engine.connect())

aux=list(df_AuxInvoiceId['InvoiceId'])
auxCustomer=[]
for i in aux:
    aux2=df_CustInv.index[df_CustInv['InvoiceId'] == i].tolist()
    auxCustomer.append(df_CustInv['CustomerId'][aux2[0]])

df_timeInv=pd.read_sql_query("""SELECT InvoiceId, InvoiceDate
FROM invoices;
 """, con=engine.connect())
aux=list(df_AuxInvoiceId['InvoiceId'])
auxTime1=[]
for i in aux:
    aux22=df_CustInv.index[df_CustInv['InvoiceId'] == i].tolist()
    auxTime1.append(df_timeInv['InvoiceDate'][aux22[0]])
df_dim_time=pd.read_sql_query("""SELECT TimeId, Day
FROM dim_time;
 """, con=engine2.connect())
auxTime=[]
for i in auxTime1:
    aux22=df_dim_time.index[df_dim_time['Day'] == i].tolist()

df_locationInv=pd.read_sql_query("""SELECT InvoiceId, BillingAddress
FROM invoices;
 """, con=engine.connect())
aux=list(df_AuxInvoiceId['InvoiceId'])
auxTime1=[]
for i in aux:
    aux22=df_locationInv.index[df_locationInv['InvoiceId'] == i].tolist()
    auxTime1.append(df_locationInv['BillingAddress'][aux22[0]])
df_dim_location=pd.read_sql_query("""SELECT LocationID, BillingAddress
FROM dim_location;
 """, con=engine2.connect())
auxLocation=[]
for i in auxTime1:
    aux22=df_dim_location.index[df_dim_location['BillingAddress'] == i].tolist()
    auxLocation.append(df_dim_location['LocationId'][aux22[0]])
    

df_AuxTrackId=pd.read_sql_query("""SELECT TrackId
FROM invoice_items;
 """, con=engine.connect())
df_AuxTrackId.head()


df_tracksP=pd.read_sql_query("""SELECT TrackId, AlbumId
FROM tracks;
 """, con=engine.connect())
df_album=pd.read_sql_query("""SELECT AlbumId, Title, ArtistId
FROM albums;
 """, con=engine.connect())
aux=list(df_AuxTrackId['TrackId'])
auxAlbum=[]
for i in aux:
    aux22=df_tracksP.index[df_tracksP['TrackId'] == i].tolist()
    auxAlbum.append(df_tracksP['AlbumId'][aux22[0]])


df_tracksPlay=pd.read_sql_query("""SELECT PlaylistId, TrackId
FROM playlist_track;
 """, con=engine.connect())
aux=list(df_AuxTrackId['TrackId'])
auxPlaylist=[]
for i in aux:
    aux22=df_tracksPlay.index[df_tracksPlay['TrackId'] == i].tolist()
    auxPlaylist.append(df_tracksPlay['PlaylistId'][aux22[0]])    
    
    df_tracksPlay=pd.read_sql_query("""SELECT PlaylistId, TrackId
FROM playlist_track;
 """, con=engine.connect())
aux=list(df_AuxTrackId['TrackId'])
auxArtist=[]
for i in auxAlbum:
    aux22=df_album.index[df_album['AlbumId'] == i].tolist()
    auxArtist.append(df_album['ArtistId'][aux22[0]])
df_UnitPrice=pd.read_sql_query("""SELECT UnitPrice
FROM invoice_items;
 """, con=engine.connect())
df_UnitPrice.head()
df_Quantity=pd.read_sql_query("""SELECT Quantity
FROM invoice_items;
 """, con=engine.connect())
df_Quantity.head()

"""# Fact_invoice_items"""

columnas=['ArtistId','AlbumId','CustomerId','InvoiceId','LocationId','PlaylistId','TimeId','TrackId', 'UnitPrice','Quantity']
df = pd.DataFrame(list(zip(list(df_AuxInvoiceId['InvoiceId']),auxCustomer,auxLocation,
                          list(df_AuxTrackId['TrackId']),auxPlaylist,auxArtist,auxAlbum,
                           list(df_Quantity['Quantity']))), columns = columnas)
updateData('fact_invoice_items',df,list(df.columns.values))
